// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TaskConnect.TaskService.Infrastructure.Persistence;

#nullable disable

namespace TaskConnect.TaskService.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250607163503_AddAISummaries")]
    partial class AddAISummaries
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TaskConnect.TaskService.Domain.Entities.Mindmap", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Edges")
                        .HasColumnType("text");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<string>("Nodes")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("IX_Mindmaps_UserId");

                    b.ToTable("Mindmaps");
                });

            modelBuilder.Entity("TaskConnect.TaskService.Domain.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<string>("OwnerId")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("IX_Projects_UserId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("TaskConnect.TaskService.Domain.Entities.ProjectSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserSettingId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectSettings");
                });

            modelBuilder.Entity("TaskConnect.TaskService.Domain.Entities.TaskItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<string>("OwnerId")
                        .HasColumnType("text");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("IX_TaskItems_UserId");

                    b.HasIndex("ProjectId");

                    b.ToTable("TaskItems");
                });

            modelBuilder.Entity("TaskConnect.TaskService.Domain.Entities.WorkLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("FromTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<int?>("PercentCompleteAfter")
                        .HasColumnType("integer");

                    b.Property<Guid>("TaskItemId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ToTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("TaskItemId");

                    b.ToTable("WorkLogs");
                });

            modelBuilder.Entity("TaskConnect.TaskService.Domain.Entities.WorkSummary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AISuggestions")
                        .HasColumnType("text");

                    b.Property<string>("AISummary")
                        .HasColumnType("text");

                    b.Property<string>("ActionItemsJson")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NextSteps")
                        .HasColumnType("text");

                    b.Property<string>("PRsJson")
                        .HasColumnType("text");

                    b.Property<string>("ProductivityInsights")
                        .HasColumnType("text");

                    b.Property<int>("ProductivityScore")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<string>("RiskAnalysis")
                        .HasColumnType("text");

                    b.Property<DateTime>("SyncDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TicketsJson")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("WorkSummaries");
                });

            modelBuilder.Entity("TaskConnect.TaskService.Domain.Entities.ProjectSetting", b =>
                {
                    b.HasOne("TaskConnect.TaskService.Domain.Entities.Project", "Project")
                        .WithMany("ProjectSettings")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("TaskConnect.TaskService.Domain.Entities.TaskItem", b =>
                {
                    b.HasOne("TaskConnect.TaskService.Domain.Entities.Project", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("TaskConnect.TaskService.Domain.Entities.WorkLog", b =>
                {
                    b.HasOne("TaskConnect.TaskService.Domain.Entities.TaskItem", "TaskItem")
                        .WithMany("WorkLogs")
                        .HasForeignKey("TaskItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaskItem");
                });

            modelBuilder.Entity("TaskConnect.TaskService.Domain.Entities.WorkSummary", b =>
                {
                    b.HasOne("TaskConnect.TaskService.Domain.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("TaskConnect.TaskService.Domain.Entities.Project", b =>
                {
                    b.Navigation("ProjectSettings");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("TaskConnect.TaskService.Domain.Entities.TaskItem", b =>
                {
                    b.Navigation("WorkLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
